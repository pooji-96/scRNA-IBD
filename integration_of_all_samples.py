# -*- coding: utf-8 -*-
"""Integration of all samples.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pp-D0I73Lf4lVBIta-YnxBOKmzxwFFRW
"""

!pip install scanpy

# Importing packages
import scanpy as sc
import pandas as pd
import numpy as np

# Installing new ones
!conda install -y -c anaconda cmake
!pip install leidenalg
!pip install louvain

!tar -xvf '/content/GSE167377_RAW.tar'

!ls

"""### Loading all the samples"""

# Defining a function to read the files into adata for each sample
def read_sample(sample_prefix):
    adata = sc.read_10x_mtx(
        '/content',  # Replace with the path to your data
        var_names='gene_symbols',
        cache=True,
        prefix=sample_prefix
    )
    adata.var_names_make_unique()
    return adata

# Reading each sample data
adata_s1 = read_sample('GSM5104042_S1_')
adata_s2 = read_sample('GSM5104043_S2_')
adata_s3 = read_sample('GSM5104044_S3_')
adata_s4 = read_sample('GSM5104045_S4_')

adata_s1

adata_s2

adata_s3

adata_s4

# Defined a function to label the sample
def pp(adata, sample_prefix):
  adata.obs['Sample'] = sample_prefix.split('_')[1] # GSM5104042_S1
  return adata

adata_s1 = pp(adata_s1, 'GSM5104042_S1')
adata_s2 = pp(adata_s2, 'GSM5104043_S2')
adata_s3 = pp(adata_s3, 'GSM5104044_S3')
adata_s4 = pp(adata_s4, 'GSM5104045_S4')

"""### Concatenating them for analysis"""

# Concatenating all samples data
adata = sc.concat([adata_s1, adata_s2, adata_s3, adata_s4])

"""### Quality control"""

# Filtering out low quality cells and genes
sc.pp.filter_cells(adata, min_genes=200) # removing cells with fewer than 200 genes
sc.pp.filter_genes(adata, min_cells=3)  # removing genes that are found in fewer than 3 cells

# Identifying mitochondrial genes
Mt = ['ND1','ND2','ND3','ND4','ND5','ND6','ND4L','ATP8','ATP6','COX1','COX2','COX3','CYTB','F','V','L1','I','S1','S2','K','T','P','N','L2','E','D','C','Y','Q','R','H','M','A','G','W','EYY68_mgr01','EYY68_mgr02']
adata.var['mt'] = adata.var.index.isin(Mt)

# Quality control metrics
sc.pp.calculate_qc_metrics(adata, qc_vars=["mt"], percent_top=None, log1p=False, inplace=True)
# Violin plot
sc.pl.violin(adata, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt'], jitter=0.4, multi_panel=True)

sc.pl.scatter(adata, x='total_counts', y='pct_counts_mt')
sc.pl.scatter(adata, x='total_counts', y='n_genes_by_counts')

# Filtering the data for further processing
upper_lim = np.quantile(adata.obs.n_genes_by_counts.values, .98)
adata = adata[adata.obs.n_genes_by_counts.values < upper_lim]
adata = adata[adata.obs.pct_counts_mt < 20]

adata

adata.var

adata.obs

# Cells in each sample
adata.obs.groupby('Sample').count()

"""### Normalization"""

# Normalization
sc.pp.normalize_total(adata, target_sum=1e4)
# Log counts
sc.pp.log1p(adata)
# Saving the raw data
adata.raw = adata

# Saving the adata file after normalization
adata.write_h5ad('combined.h5ad')

"""### Feature selection"""

# Highly variable genes
sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)
sc.pl.highly_variable_genes(adata)

"""### Dimentionality Reduction"""

# Scaling the data
sc.pp.scale(adata, max_value = 10)

# Calculating PCA
sc.tl.pca(adata, svd_solver='arpack')
# Plotting PCA
sc.pl.pca_variance_ratio(adata, log=True)

"""### Compute the neighborhoods"""

# Finding neighborhoods
sc.pp.neighbors(adata, n_pcs=20)
sc.tl.umap(adata)
sc.tl.leiden(adata, resolution = 0.25)

sc.pl.umap(adata, color = ['leiden', 'Sample'], legend_loc='on data')

adata

"""### Integration"""

# Reading the file saved after Normalization
adata = sc.read_h5ad('combined.h5ad')

adata

"""Feature Selection"""

# Highly variable genes
sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)
sc.pl.highly_variable_genes(adata)

# Scaling the data
sc.pp.scale(adata, max_value=10)

"""Dimentionality reduction"""

# Calculating PCA
sc.tl.pca(adata, svd_solver='arpack')
# Plotting PCA
sc.pl.pca_variance_ratio(adata, log=True)

"""Batch effect removal and integration"""

!pip install bbknn

import bbknn
# Finding neighborhoods
sc.external.pp.bbknn(adata, batch_key = 'Sample')

"""### Clustering"""

sc.tl.umap(adata)
sc.tl.leiden(adata, resolution = 0.5)

sc.pl.umap(adata, color = ['leiden', 'Sample'])

sc.pl.umap(adata, color = ['leiden', 'Sample'], legend_loc='on data')

adata.write_h5ad('integrated.h5ad')

"""### Finding markers"""

# Finding markers
sc.tl.rank_genes_groups(adata, 'leiden', method='wilcoxon')
sc.pl.rank_genes_groups(adata, n_genes=20, sharey=False)

markers = sc.get.rank_genes_groups_df(adata, None)
markers = markers[(markers.pvals_adj < 0.05) & (markers.logfoldchanges > 0.5)]
markers

# Saving the markers as dataframe
marker_genes_all = pd.DataFrame(adata.uns["rank_genes_groups"]["names"]).head(10)
marker_genes_all

adata.uns['markers'] = markers
adata

"""### Labelling Cell types"""

cell_type = {"0":"Macrophages",
"1":"B cells",
"2":"B cells",
"3":"Macrophages",
"4":"B cells",
"5":"B cells",
"6":"B cells",
"7":"Fibroblasts",
"8":"B cells",
"9":"Dendritic cells",
"10":"Fibroblasts",
"11":"T cells",
"12":"Neutrophils",
"13":"Macrophages",
"14":"Epithelial cells",
"15":"Epithelial cells",
"16":"Epithelial cells",
 }

adata.obs['Cell Type'] = adata.obs.leiden.map(cell_type)

sc.pl.umap(adata, color = ['Cell Type'], frameon=False)

"""### Cellular Diversity in Control and Infected samples"""

condition = {"S1":"Control",
"S2":"Infected",
"S3":"Control",
"S4":"Infected",
 }
adata.obs['Condition'] = adata.obs.Sample.map(condition)

sc.pl.umap(adata, color = ['Condition'], frameon=False)

control = ["Control"]
adata1 = adata[adata.obs.Condition.isin(control)]

sc.pl.umap(adata1, color = ['Condition'], frameon=False)

sc.pl.umap(adata1, color = ['Cell Type'], frameon=False)

control = ["Infected"]
adata2 = adata[adata.obs.Condition.isin(control)]

sc.pl.umap(adata2, color = ['Condition'], frameon=False)

sc.pl.umap(adata2, color = ['Cell Type'], frameon=False)



